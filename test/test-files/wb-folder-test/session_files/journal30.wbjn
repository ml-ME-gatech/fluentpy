# encoding: utf-8
# Release 19.1
SetScriptVersion(Version="19.1.103")
system1 = GetSystem(Name="FFF 14")
setup1 = system1.GetContainer(ComponentName="Setup")
fluentLauncherSettings1 = setup1.GetFluentLauncherSettings()
fluentLauncherSettings1.SetEntityProperties(Properties=Set(EnvPath={}))
setup1.Edit()
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Monitors|Residual"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Monitors|Residual"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-tree-selections \"NavigationPane*List_Tree1\" (list \"Solution|Monitors|Residual\"))(cx-gui-do cx-set-real-entry-list \"Residual Monitors*Table1*Table2*Table1*Table1(Equations)*RealEntry11\" '( 0.0001))(cx-gui-do cx-set-real-entry-list \"Residual Monitors*Table1*Table2*Table1*Table1(Equations)*RealEntry17\" '( 0.0001))(cx-gui-do cx-set-real-entry-list \"Residual Monitors*Table1*Table2*Table1*Table1(Equations)*RealEntry23\" '( 0.0001))(cx-gui-do cx-set-real-entry-list \"Residual Monitors*Table1*Table2*Table1*Table1(Equations)*RealEntry29\" '( 0.0001))(cx-gui-do cx-set-real-entry-list \"Residual Monitors*Table1*Table2*Table1*Table1(Equations)*RealEntry35\" '( 1e-07))(cx-gui-do cx-set-real-entry-list \"Residual Monitors*Table1*Table2*Table1*Table1(Equations)*RealEntry41\" '( 0.0001))(cx-gui-do cx-set-real-entry-list \"Residual Monitors*Table1*Table2*Table1*Table1(Equations)*RealEntry47\" '( 0.0001))(cx-gui-do cx-activate-item \"Residual Monitors*PanelButtons*PushButton1(OK)\")")
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Monitors|Report Files"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Monitors|Report Files"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Monitors|Report Files"))')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Report File Definitions*Table1*ButtonBox3*PushButton1(New)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"New Report File*Table1*List2(Available Report Definitions)\" '( 0))(cx-gui-do cx-activate-item \"New Report File*Table1*List2(Available Report Definitions)\")(cx-gui-do cx-set-list-selections \"New Report File*Table1*List2(Available Report Definitions)\" '( 0 1 2 3))(cx-gui-do cx-activate-item \"New Report File*Table1*List2(Available Report Definitions)\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "New Report File*Table1*Table4*PushButton1( Add>>)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "New Report File*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Report File Definitions*PanelButtons*PushButton1(Close)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Monitors|Report Plots"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Monitors|Report Plots"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Monitors|Report Plots"))')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Report Plot Definitions*Table1*ButtonBox3*PushButton1(New)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"New Report Plot*Table1*List4(Available Report Definitions)\" '( 0))(cx-gui-do cx-activate-item \"New Report Plot*Table1*List4(Available Report Definitions)\")(cx-gui-do cx-set-list-selections \"New Report Plot*Table1*List4(Available Report Definitions)\" '( 0 1))(cx-gui-do cx-activate-item \"New Report Plot*Table1*List4(Available Report Definitions)\")(cx-gui-do cx-set-list-selections \"New Report Plot*Table1*List4(Available Report Definitions)\" '( 1))(cx-gui-do cx-activate-item \"New Report Plot*Table1*List4(Available Report Definitions)\")(cx-gui-do cx-set-list-selections \"New Report Plot*Table1*List4(Available Report Definitions)\" '( 1 2))(cx-gui-do cx-activate-item \"New Report Plot*Table1*List4(Available Report Definitions)\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "New Report Plot*Table1*Table3*PushButton1( Add>>)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "New Report Plot*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Report Plot Definitions*Table1*ButtonBox3*PushButton1(New)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"New Report Plot*Table1*List4(Available Report Definitions)\" '( 3))(cx-gui-do cx-activate-item \"New Report Plot*Table1*List4(Available Report Definitions)\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "New Report Plot*Table1*Table3*PushButton1( Add>>)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "New Report Plot*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Report Plot Definitions*PanelButtons*PushButton1(Close)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Monitors|Convergence Conditions"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Monitors|Convergence Conditions"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Monitors|Convergence Conditions"))')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Convergence Conditions*Table2*PushButton1( Add)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Convergence Conditions*Table2*PushButton1( Add)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Convergence Conditions*Table2*PushButton1( Add)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Convergence Conditions*Table1*DropDownList11\" '( 0))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Convergence Conditions*Table1*DropDownList11")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Convergence Conditions*Table1*DropDownList19\" '( 3))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Convergence Conditions*Table1*DropDownList19")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Convergence Conditions*Table1*DropDownList27\" '( 1))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Convergence Conditions*Table1*DropDownList27")')
setup1.SendCommand(Command="(cx-gui-do cx-set-real-entry-list \"Convergence Conditions*Table1*RealEntry12\" '( 1e-05))(cx-gui-do cx-set-real-entry-list \"Convergence Conditions*Table1*RealEntry20\" '( 1e-05))(cx-gui-do cx-set-real-entry-list \"Convergence Conditions*Table1*RealEntry28\" '( 1e-05))(cx-gui-do cx-set-integer-entry \"Convergence Conditions*Table1*IntegerEntry13\" 200)(cx-gui-do cx-activate-item \"Convergence Conditions*Table1*IntegerEntry13\")")
setup1.SendCommand(Command='(cx-gui-do cx-set-integer-entry "Convergence Conditions*Table1*IntegerEntry21" 200)(cx-gui-do cx-activate-item "Convergence Conditions*Table1*IntegerEntry21")')
setup1.SendCommand(Command='(cx-gui-do cx-set-integer-entry "Convergence Conditions*Table1*IntegerEntry29" 200)(cx-gui-do cx-activate-item "Convergence Conditions*Table1*IntegerEntry29")')
setup1.SendCommand(Command='(cx-gui-do cx-set-integer-entry "Convergence Conditions*Table1*IntegerEntry14" 10)(cx-gui-do cx-activate-item "Convergence Conditions*Table1*IntegerEntry14")')
setup1.SendCommand(Command='(cx-gui-do cx-set-integer-entry "Convergence Conditions*Table1*IntegerEntry22" 10)(cx-gui-do cx-activate-item "Convergence Conditions*Table1*IntegerEntry22")')
setup1.SendCommand(Command='(cx-gui-do cx-set-integer-entry "Convergence Conditions*Table1*IntegerEntry30" 10)(cx-gui-do cx-activate-item "Convergence Conditions*Table1*IntegerEntry30")')
setup1.SendCommand(Command='(cx-gui-do cx-set-toggle-button2 "Convergence Conditions*Table1*CheckButton15" #t)(cx-gui-do cx-activate-item "Convergence Conditions*Table1*CheckButton15")(cx-gui-do cx-set-toggle-button2 "Convergence Conditions*Table1*CheckButton31" #t)(cx-gui-do cx-activate-item "Convergence Conditions*Table1*CheckButton31")(cx-gui-do cx-set-toggle-button2 "Convergence Conditions*Table1*CheckButton23" #t)(cx-gui-do cx-activate-item "Convergence Conditions*Table1*CheckButton23")(cx-gui-do cx-activate-item "Convergence Conditions*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Run Calculation"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Run Calculation"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Run Calculation"))(cx-gui-do cx-set-integer-entry "Run Calculation*Table1*IntegerEntry10(Number of Iterations)" 1000)(cx-gui-do cx-activate-item "Run Calculation*Table1*IntegerEntry10(Number of Iterations)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Run Calculation*Table1*PushButton22(Calculate)")(cx-gui-do cx-activate-item "Question*OK")(cx-use-window-id 3)')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Information*OK")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Fluent")')
Save(Overwrite=True)
